package com.swirlds.streamloader;import com.swirlds.streamloader.input.DiskRecordFileLoader;import com.swirlds.streamloader.input.GCPRecordFileLoader;import com.swirlds.streamloader.input.RecordFileLoader;import com.swirlds.streamloader.output.FileOutputHandler;import com.swirlds.streamloader.output.OutputHandler;import com.swirlds.streamloader.processing.BalanceProcessor;import com.swirlds.streamloader.processing.RecordFileProcessor;import com.swirlds.streamloader.util.PrettyStatusPrinter;import java.nio.file.Path;import java.time.Instant;import java.util.Date;public class StreamDownloaderMain {	public static void main(String[] args) throws Exception {//		RecordFileLoader recordFileLoader = new DiskRecordFileLoader(Path.of("test-data/recordstreams/v2"));//		RecordFileLoader recordFileLoader = new DiskRecordFileLoader(Path.of("test-data/recordstreams/mainnet-0.0.3"));		RecordFileLoader recordFileLoader = new GCPRecordFileLoader(				GCPRecordFileLoader.HederaNetwork.MAINNET,				"0.0.3",				Date.from(Instant.EPOCH)		);		try (OutputHandler outputHandler = new FileOutputHandler()) {			final PrettyStatusPrinter prettyStatusPrinter = new PrettyStatusPrinter();			recordFileLoader.startLoadingRecordFiles(fileData -> {				try {					var partProcessed = RecordFileProcessor.processRecordFile(fileData);					if (partProcessed != null) {						var processed = BalanceProcessor.processBalances(partProcessed);						outputHandler.outputRecordFile(processed.recordFileRow());						for (var transactionRowJson : processed.transactionsRows()) {							outputHandler.outputTransaction(transactionRowJson);						}						prettyStatusPrinter.printStatusUpdate(partProcessed.startConsensusTimestamp());					} else {						System.err.println("PartProcessed=NULL for file "+fileData.fileName());					}				} catch (Exception e) {					throw new RuntimeException(e);				}			});		}	}}